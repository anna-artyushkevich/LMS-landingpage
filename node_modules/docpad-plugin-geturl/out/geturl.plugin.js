// Generated by CoffeeScript 1.6.3
(function() {
  var url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require('url');

  module.exports = function(BasePlugin) {
    var getUrlPlugin, _ref;
    return getUrlPlugin = (function(_super) {
      __extends(getUrlPlugin, _super);

      function getUrlPlugin() {
        _ref = getUrlPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      getUrlPlugin.prototype.name = 'geturl';

      getUrlPlugin.prototype.extendTemplateData = function(_arg) {
        var config, dconfig, templateData, _base;
        templateData = _arg.templateData;
        dconfig = this.docpad.getConfig();
        dconfig.plugins || (dconfig.plugins = {});
        config = (_base = dconfig.plugins).geturl || (_base.geturl = {});
        config.url || (config.url = dconfig.templateData.site.url);
        config.basepath || (config.basepath = url.parse(config.url).pathname);
        return templateData.getUrl = function(to, from) {
          from = from || config.url + this.document.url;
          if (typeof to === "string") {
            if (to[0] === "/" && to[1] !== "/") {
              to = config.url + to;
            }
            return url.resolve(from, to);
          }
          if (typeof to === "object") {
            if (typeof to.url === "string") {
              return templateData.getUrl(to.url, from);
            }
            if (typeof to.url === "function") {
              return templateData.getUrl(typeof to.get === "function" ? to.get('url') : void 0, from);
            }
            if (to.map) {
              return to.map(function(d) {
                return templateData.getUrl(d, from);
              });
            }
          }
          return to;
        };
      };

      return getUrlPlugin;

    })(BasePlugin);
  };

}).call(this);
